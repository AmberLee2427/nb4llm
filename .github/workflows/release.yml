name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  release:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Extract version from tag
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Extracted version: $VERSION"
    
    - name: Update version in __init__.py
      run: |
        sed -i "s/__version__ = '.*'/__version__ = '${{ steps.version.outputs.version }}'/" src/nb4llm/__init__.py
        echo "Updated src/nb4llm/__init__.py version to ${{ steps.version.outputs.version }}"
    
    - name: Update version in pyproject.toml
      run: |
        sed -i "s/version = \".*\"/version = \"${{ steps.version.outputs.version }}\"/" pyproject.toml
        echo "Updated pyproject.toml version to ${{ steps.version.outputs.version }}"
    
    - name: Update version in conf.py
      run: |
        sed -i "s/^release = .*/release = '${{ steps.version.outputs.version }}'/" docs/source/conf.py
        echo "Updated docs/source/conf.py release to ${{ steps.version.outputs.version }}"
    
    - name: Build package
      run: python -m build
    
    - name: Check package
      run: twine check dist/*
    
    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: twine upload dist/*
    
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ steps.version.outputs.version }}
        body: |
          ## What's Changed
          
          Automated release for version ${{ steps.version.outputs.version }}
          
          ### Installation
          ```bash
          pip install nb4llm==${{ steps.version.outputs.version }}
          ```
          
          ### Usage
          ```bash
          # Convert notebook to text
          nb4llm notebook.ipynb
          
          # Convert text back to notebook
          nb4llm --reverse notebook.txt
          ```
        draft: false
        prerelease: false 